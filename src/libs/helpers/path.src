path = function
  _path = {}

  _path.basename = function(path)
    if path then return _path.sanitize(path).split("/")[-1]
  end function

  _path.parentPath = function(path)
    if path isa string and path then return parent_path(path)
  end function

  _path.sanitize = function(path)
    if path isa string then
      path = path.trim
      if path.len > 1 and path[-1] == "/" then path = path[ : -1]
      if path and path[0] == "." and path[1] == "/" then path = path[2 : ]
      if path then return path.replace("//*", "/")
    end if
  end function

  _path.join = function(paths)
    res = null
    if paths isa list then res = _path.sanitize(paths.join("/"))
    return res
  end function

  _path.normalize = function(path)
    path = _path.sanitize(path)
    if gsh.t("ctx") and gsh.ctx.t("currentPath") then currentPath = gsh.ctx.currentPath else currentPath = current_path
    if path isa string and path and path[0] != "/" then path = currentPath + "/" + path
    path = _path.sanitize(path)
    relativeSplit = path.split("\.\.")
    if relativeSplit and relativeSplit.len > 1 then
      current = relativeSplit[0]
      for i in relativeSplit.indexes
        if i then
          current = _path.sanitize(_path.parentPath(current) + relativeSplit[i])
        end if
      end for
      path = current
    end if
    return _path.sanitize(path)
  end function

  _path.resolve = function(paths)
    if paths isa list and paths.len > 1 then
      current = paths[0]
      for i in paths.indexes
        if i then
          currentPath = _path.sanitize(paths[i])
          if currentPath and currentPath[0] == "/" then
            current = currentPath
          else
            current = current + "/" + currentPath
          end if
        end if
      end for
      return _path.normalize(current)
    end if
  end function

  _path.parse = function(path)
    spl = gsh.normalize(path).split("/")
    return {
      "dir": spl[ : -1].join("/"),
      "name": spl[-1],
    }
  end function

  return _path
end function