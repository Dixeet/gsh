tree = function
  cli = new gsh.Cli
  cli.init(
    "Tree",
    "tree",
    true,
    true,
    true)


  // ////////////////////////////////////////////////
  // Exec                                          //
  // ////////////////////////////////////////////////
  cli.exec = function(params)
    recursiveLs = function(dir, params)
      file = gsh.getFile(dir)
      res = [ file ]
      if file.is_folder then
        children = gsh.commands.ls.exec([ file.path ] + params)
        for child in children
          res += recursiveLs(child.path, params)
        end for
      end if
      return res
    end function

    sameParentPath = function(file)
      return function(item)
        return file.parent and item.parent and file.parent.path == item.parent.path
      end function
    end function

    // main ////////////////////////////////////
    self.parseParams(params)
    if self.options.help then return
    this = self

    log = @self.logger.log

    dir = gsh.normalize(gsh.ctx.currentPath)
    if self.args then dir = gsh.normalize(self.args[0])

    if not gsh.getFile(dir) then
      error = "No such file or directory"
      self.logger.error(error)
      return error
    end if

    lsParams = [ "--silent" ]
    if self.options.time then lsParams.push("-t")
    if self.options.reverse then lsParams.push("-r")

    res = recursiveLs(dir, lsParams)

    params = {
      "permissions": self.options.permissions,
      "owner": self.options.owner,
      "group": self.options.group,
      "size": self.options.size,
      "long": self.options.long,
    }

    if self.options.pattern then
      matchPattern = function(item)
        relativePath = gsh.helpers.path.relative(dir, item.path)
        return relativePath.matchGlob(this.options.pattern)
      end function
      if res then res = res[1 : ]
      res = res.filter(@matchPattern)
    end if

    prefixLvlStart = { 1: "| ".color("grey") }
    rev = res[ : ]
    rev.reverse
    for i in res.indexes
      if i == 0 and not self.options.pattern then
        log(gsh.helpers.getFileString(res[0], { "customName": res[0].path }))
      else
        file = res[i]
        pathToSplit = gsh.helpers.path.relative(dir, file.path)

        if not self.options.pattern then
          lvl = pathToSplit.split("/").len - 1
          sameParentPath = function(item)
            return file.parent and item.parent and file.parent.path == item.parent.path
          end function
          lastIndexOfLvl = res.len - 1 - rev.findIndex(@sameParentPath)
          isLastOfLvl = i == lastIndexOfLvl

          if not isLastOfLvl then prefixLvl = "|".color("grey") else prefixLvl = "'".color("grey")
          prefix = ""
          if lvl > 1 then
            if isLastOfLvl then prefixLvlStart[lvl] = "  " else prefixLvlStart[lvl] = "| ".color("grey")
            for x in range(1, lvl - 1)
              prefix += prefixLvlStart[x.to_int]
            end for
          end if
          prefix += prefixLvl + "- ".color("grey")
          if self.options.fullpath then
            params.customName = pathToSplit
          end if
          filename = gsh.helpers.getFileString(file, params)
          name = prefix + filename
        else
          name = gsh.helpers.getFileString(file, { "customName": pathToSplit })
        end if
        log(name)
      end if
    end for

    return res
  end function


  // ////////////////////////////////////////////////
  // Config                                          //
  // ////////////////////////////////////////////////
  cli.definition.usages = [
    "tree [OPTION]... [<dir>]",
    "tree",
    "tree -f /home/guest/",
    "tree -l /",
    "tree -f -p -u -g -s -t -r /",
    "tree / -P *.txt",
  ]
  cli.definition.sections = [
    "",
    "List contents of <dir> in a tree-like format",
    "<dir> is current directory if omitted",
  ]

  opts = {}
  opts.fullpath = new cli.CliOption + {
    "name": "--fullpath",
    "alias": "-f",
    "description": "Show full path prefix for each file relative to <dir>",
  }
  opts.permissions = new cli.CliOption + {
    "name": "--permission",
    "alias": "-p",
    "description": "Print the permissions of each file",
  }
  opts.owner = new cli.CliOption + {
    "name": "--user",
    "alias": "-u",
    "description": "Print the owner user",
  }
  opts.group = new cli.CliOption + {
    "name": "--group",
    "alias": "-g",
    "description": "Print the owner group",
  }
  opts.size = new cli.CliOption + {
    "name": "--size",
    "alias": "-s",
    "description": "Print the size of each file",
  }
  opts.long = new cli.CliOption + {
    "name": "--long",
    "alias": "-l",
    "description": "Equivalent to -p -u -g -s",
  }
  opts.time = new cli.CliOption + {
    "name": "--time",
    "alias": "-t",
    "description": "Sort by time",
  }
  opts.reverse = new cli.CliOption + {
    "name": "--reverse",
    "alias": "-r",
    "description": "Reverse sorted tree",
  }
  opts.pattern = new cli.CliOption + {
    "name": "--pattern",
    "alias": "-P",
    "arg": "glob_pattern",
    "description": "Filter by glob pattern",
  }
  opts.help = new cli.CliOption + {
    "name": "--help",
    "alias": "-h",
    "description": "Show this screen",
  }
  opts.silent = new cli.CliOption + {
    "name": "--silent",
    "description": "Silent output",
  }
  cli.definition.options = opts

  return cli
end function