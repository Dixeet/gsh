tree = function
  cli = new gsh.Cli
  cli.init(
    "Tree",
    "tree",
    true,
    true,
    true)


  // ////////////////////////////////////////////////
  // Exec                                          //
  // ////////////////////////////////////////////////
  cli.exec = function(params)
    recursiveLs = function(dir, params)
      file = gsh.getFile(dir)
      res = [ file ]
      if file.is_folder then
        children = gsh.commands.ls.exec([ file.path ] + params)
        for child in children
          res += recursiveLs(child.path, params)
        end for
      end if
      return res
    end function

    sameParentPath = function(file)
      return function(item)
        print(file)
        return file.parent and item.parent and file.parent.path == item.parent.path
      end function
    end function

    // main ////////////////////////////////////
    self.parseParams(params)

    log = @self.logger.log

    dir = gsh.ctx.currentPath
    if self.args then dir = self.args[0]

    lsParams = [ "--silent" ]
    if self.options.time then lsParams.push("-t")
    if self.options.reverse then lsParams.push("-r")

    res = recursiveLs(dir, lsParams)

    params = {
      "permissions": self.options.permissions,
      "owner": self.options.owner,
      "group": self.options.group,
      "size": self.options.size,
      "long": self.options.long,
    }

    log(gsh.helpers.getFileString(res[0], { "customName": res[0].path }))
    prefixLvlStart = { 1: "│ " }
    for i in range(1, res.len - 1)
      file = res[i]
      if dir == "/" then pathToSplit = file.path else pathToSplit = file.path.replace(dir, "")
      lvl = pathToSplit.split("/").len - 1

      rev = res[ : ]
      rev.reverse
      sameParentPath = function(item)
        return file.parent and item.parent and file.parent.path == item.parent.path
      end function
      lastIndexOfLvl = res.len - 1 - rev.findIndex(@sameParentPath)
      isLastOfLvl = i == lastIndexOfLvl

      if not isLastOfLvl then prefixLvl = "├" else prefixLvl = "└"
      prefix = ""
      if lvl > 1 then
        if isLastOfLvl then prefixLvlStart[lvl] = "  " else prefixLvlStart[lvl] = "│ "
        for x in range(1, lvl - 1)
          prefix += prefixLvlStart[x.to_int]
        end for
      end if
      prefix += prefixLvl + "─ "
      if self.options.fullpath then
        if dir == "/" then params.customName = file.path else params.customName = file.path.replace(dir, ".")
      end if

      filename = gsh.helpers.getFileString(file, params)
      name = prefix + filename
      log(name)
    end for

    return res
  end function


  // ////////////////////////////////////////////////
  // Config                                          //
  // ////////////////////////////////////////////////
  cli.definition.usages = [
    "tree [OPTION]... [<dir>]",
    "tree",
    "tree -f /home/guest/",
    "tree -f -p -u -g -s -t -r /",
  ]
  cli.definition.sections = [
    "",
    "List contents of <dir> in a tree-like format",
    "<dir> is current directory if omitted",
  ]

  opts = {}
  opts.fullpath = new cli.CliOption + {
    "name": "--fullpath",
    "alias": "-f",
    "description": "Show full path prefix for each file relative to <dir>",
  }
  opts.permissions = new cli.CliOption + {
    "name": "--permission",
    "alias": "-p",
    "description": "Print the permissions of each file",
  }
  opts.owner = new cli.CliOption + {
    "name": "--user",
    "alias": "-u",
    "description": "Print the owner user",
  }
  opts.group = new cli.CliOption + {
    "name": "--group",
    "alias": "-g",
    "description": "Print the owner group",
  }
  opts.size = new cli.CliOption + {
    "name": "--size",
    "alias": "-s",
    "description": "Print the size of each file",
  }
  opts.long = new cli.CliOption + {
    "name": "--long",
    "alias": "-l",
    "description": "Equivalent to -p -u -g -s",
  }
  opts.time = new cli.CliOption + {
    "name": "--time",
    "alias": "-t",
    "description": "Sort by time",
  }
  opts.reverse = new cli.CliOption + {
    "name": "--reverse",
    "alias": "-r",
    "description": "Reverse sorted tree",
  }
  opts.help = new cli.CliOption + {
    "name": "--help",
    "alias": "-h",
    "description": "Show this screen",
  }
  opts.silent = new cli.CliOption + {
    "name": "--silent",
    "description": "Silent output",
  }
  cli.definition.options = opts

  return cli
end function