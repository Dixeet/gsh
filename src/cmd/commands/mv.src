mv = function
  cli = new gsh.Cli
  cli.init("Mv", { "os": true })


  // ////////////////////////////////////////////////
  // Exec                                          //
  // ////////////////////////////////////////////////
  cli.exec = function(params)
    self.parseParams(params)
    if self.options.help then return 

    log = @self.logger.log

    if not self.args or not self.args.len > 1 then return self.logger.error("mv: expects 2 parameters")

    file = gsh.getFile(gsh.normalize(self.args[0]))
    if not file then return self.logger.error("mv: " + self.args[0] + " no such file or directory")

    destination = gsh.getFile(gsh.normalize(self.args[1]))
    path = null
    name = null
    if destination then
      if destination.is_folder then
        path = destination.path
        name = file.name
      else
        path = destination.parent.path
        name = destination.name
        ask = null
        if gsh.settings.behavior.onMvAlreadyExists.confirm then
          ask = gsh.helpers.ask(name + " already exists, overwrite?", [
            "y",
            "n",
          ], gsh.settings.behavior.onMvAlreadyExists.defaultAnswer)
        end if
        if ask == "n" then
          self.warn.success("mv aborted")
          return null
        end if
      end if
    else
      parse = gsh.helpers.path.parse(self.args[1])
      path = parse.dir
      name = parse.name
    end if

    filepath = file.path
    res = file.move(path, name)

    if res isa string then
      self.logger.error(res)
    else
      res = gsh.getFile(gsh.helpers.path.resolve([
        path,
        name,
      ]))
      self.logger.success("mv: " + filepath + " -> " + res.path)
    end if

    return res

  end function


  // ////////////////////////////////////////////////
  // Config                                          //
  // ////////////////////////////////////////////////

  opts = {}
  opts.help = new cli.CliOption + {
    "name": "--help",
    "alias": "-h",
    "description": "Show this screen",
  }
  opts.silent = new cli.CliOption + {
    "name": "--silent",
    "description": "Silent output",
  }
  cli.definition.options = opts
  cli.definition.usages = [
    "mv (<file>|<folder>) (<destination_file> | <destination_folder>)",
    "mv foo.txt bar.txt",
    "mv /home/guest/welcome.pdf ../Downloads/",
  ]
  cli.definition.returns = "result file or error string"
  cli.definition.sections = [
    "Description".bold,
    "Move a file or folder to a new path",
    "Also used to rename files or folders",
  ]

  return cli
end function