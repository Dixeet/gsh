chown = function
  cli = new gsh.Cli
  cli.init("Chown", { "os": true })


  // ////////////////////////////////////////////////
  // Exec                                          //
  // ////////////////////////////////////////////////
  cli.exec = function(params)
    // functions ////////////////////////////////////

    // main ////////////////////////////////////
    self.parseParams(params)
    if self.options.help then return 

    log = @self.logger.log

    if not self.args or not self.args.len > 1 then
      return self.logger.error("expects 2 parameters")
    end if

    file = gsh.getFile(gsh.normalize(self.args[1]))

    if not file then return self.logger.error("no such file or directory")

    if not self.options.recursive then self.options.recursive = false

    userGroup = self.args[0].split(":")
    user = userGroup[0]
    if userGroup.len > 1 then group = userGroup[1] else group = null

    res = file.set_owner(user, self.options.recursive)
    if res != "" then return self.logger.error(res)

    if group then
      res = file.set_group(user, self.options.recursive)
      if res != "" then return self.logger.error(res)
    end if

    self.logger.success(file.path + " ownership changed to " + self.args[0])

    return file

  end function


  // ////////////////////////////////////////////////
  // Config                                          //
  // ////////////////////////////////////////////////

  opts = {}
  opts.help = new cli.CliOption + {
    "name": "--help",
    "alias": "-h",
    "description": "Show this screen",
  }
  opts.silent = new cli.CliOption + {
    "name": "--silent",
    "description": "Silent output",
  }
  opts.recursive = new cli.CliOption + {
    "name": "--recursive",
    "alias": "-R",
    "description": "Recursive mode",
  }
  cli.definition.options = opts
  cli.definition.usages = [
    "chown [OPTION]... (<owner> | <owner:group>) <file>",
    "chown foo /home/guest/foo.exe",
    "chown -R foo:bar ./baz.txt",
  ]
  cli.definition.returns = "result file or error string"
  cli.definition.sections = [
    "Description".bold,
    "Change ownership of a file or a folder",
    "Ownership can be <user> or <user:group>",
  ]

  return cli
end function