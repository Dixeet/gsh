rm = function
  cli = new gsh.Cli
  cli.init(
    "rm",
    "rm",
    true,
    true,
    true)


  // ////////////////////////////////////////////////
  // Exec                                          //
  // ////////////////////////////////////////////////
  cli.exec = function(params)
    // functions ////////////////////////////////////

    // main ////////////////////////////////////
    self.parseParams(params)
    if self.options.help then return

    log = @self.logger.log

    if not self.args then
      error = "rm: expects a file, a folder or a pattern"
      self.logger.error(error)
      return error
    end if

    parse = gsh.helpers.glob.parse(self.args[0])

    cmdParams = [ "--silent" ]
    if parse.path then cmdParams.push(parse.path)
    if parse.pattern then cmdParams += [
      "-P",
      parse.pattern,
    ]
    cmd = "tree"
    if parse.dir then
      cmdParams.push(parse.dir)
      if not parse.deep then cmd = "ls"
    end if

    files = gsh.commands[cmd].exec(cmdParams)

    if files isa string and files then
      self.logger.error(files)
      return 
    end if

    ask = null
    if gsh.settings.behavior.onRm.confirm and not self.options.force then
      ask = gsh.helpers.ask(files.len + " file(s) will be deleted, confirm?", [
        "y",
        "n",
      ], gsh.settings.behavior.onRm.defaultAnswer)
    end if
    if ask == "n" then
      self.warn.success("rm aborted")
      return null
    end if

    for f in files
      file = gsh.getFile(f.path)
      if file then
        if file.is_folder and not self.options.recursive then
          self.logger.warn("rm: " + file.name + " is a folder, use -r to delete")
        else
          name = file.path
          res = file.delete
          if res isa string and res then self.logger.error(res) else self.logger.success(name + " deleted")
        end if
      end if
    end for

    return 

  end function


  // ////////////////////////////////////////////////
  // Config                                          //
  // ////////////////////////////////////////////////

  opts = {}
  opts.help = new cli.CliOption + {
    "name": "--help",
    "alias": "-h",
    "description": "Show this screen",
  }
  opts.force = new cli.CliOption + {
    "name": "--force",
    "alias": "-f",
    "description": "Dont ask for confirmation",
  }
  opts.recursive = new cli.CliOption + {
    "name": "--recursive",
    "alias": "-r",
    "description": "Recursive, delete folder",
  }
  opts.silent = new cli.CliOption + {
    "name": "--silent",
    "description": "Silent output",
  }
  cli.definition.options = opts
  cli.definition.usages = [
    "rm [OPTION]... (<file>|<folder>|<glob_pattern>)",
    "rm foo.txt",
    "rm -r /home/guest/Downloads",
    "rm -r /home/foobar/.Trash/*",
  ]
  cli.definition.sections = [
    "",
    "Delete a file or folder",
    "If a pattern is given, remove everything matching that pattern",
  ]

  return cli
end function