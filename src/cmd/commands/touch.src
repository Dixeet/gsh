touch = function
  cli = new gsh.Cli
  cli.init("Touch", { "os": true })


  // ////////////////////////////////////////////////
  // Exec                                          //
  // ////////////////////////////////////////////////
  cli.exec = function(params)
    self.parseParams(params)
    if self.options.help then return 
    log = @self.logger.log

    if not self.args or not self.args[0] then return self.logger.error("touch: expects atleast <path> argument")

    path = gsh.normalize(self.args[0])
    parsedPath = gsh.helpers.path.parse(path)
    create = gsh.ctx.local.computer.touch(parsedPath.dir, parsedPath.name)

    if create isa string then
      self.logger.error(create)
      return 
    end if

    file = gsh.getFile(path)
    if self.args.len > 1 and self.args[1] then
      file.set_content(self.args[1 : ].join(" "))
    end if

    return file
  end function


  // ////////////////////////////////////////////////
  // Config                                          //
  // ////////////////////////////////////////////////

  cli.definition.usages = [
    "touch <path> [<content>]...",
    "touch foo",
    "touch /home/guest/my_file.txt foo bar baz",
  ]
  cli.definition.returns = "result file or error string"
  cli.definition.sections = [
    "Description".bold,
    "Create a file at <path>",
    "Set contents from the rest of the arguments",
  ]

  opts = {}
  opts.help = new cli.CliOption + {
    "name": "--help",
    "alias": "-h",
    "description": "Show this screen",
  }
  opts.silent = new cli.CliOption + {
    "name": "--silent",
    "description": "Silent output",
  }
  cli.definition.options = opts


  return cli
end function